// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package rest

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all light effects
	// (GET /lights)
	GetLights(w http.ResponseWriter, r *http.Request)
	// Stop all light effects
	// (POST /lights/clear)
	PostLightsClear(w http.ResponseWriter, r *http.Request)
	// Get light effect details
	// (GET /lights/{effect})
	GetLightsEffect(w http.ResponseWriter, r *http.Request, effect LightEffect)
	// Start a light effect
	// (POST /lights/{effect}/start)
	PostLightsStart(w http.ResponseWriter, r *http.Request, effect LightEffect)
	// Stop a light effect
	// (POST /lights/{effect}/stop)
	PostLightsStop(w http.ResponseWriter, r *http.Request, effect LightEffect)
	// List all playlists
	// (GET /music)
	GetMusic(w http.ResponseWriter, r *http.Request)
	// Play the next track
	// (POST /music/next)
	PostMusicNext(w http.ResponseWriter, r *http.Request)
	// Pause music playback
	// (POST /music/pause)
	PostMusicPause(w http.ResponseWriter, r *http.Request)
	// Start music playback
	// (POST /music/play)
	PostMusicPlay(w http.ResponseWriter, r *http.Request)
	// Get now playing info
	// (GET /music/playing)
	GetMusicPlaying(w http.ResponseWriter, r *http.Request)
	// Stop music playback
	// (POST /music/stop)
	PostMusicStop(w http.ResponseWriter, r *http.Request)
	// Get playlist details
	// (GET /music/{playlist})
	GetMusicPlaylist(w http.ResponseWriter, r *http.Request, playlist Playlist)
	// Get playlist chance
	// (GET /music/{playlist}/chance)
	GetMusicPlaylistChance(w http.ResponseWriter, r *http.Request, playlist string)
	// Get position in playlist
	// (GET /music/{playlist}/position)
	GetMusicPlaylistPosition(w http.ResponseWriter, r *http.Request, playlist string)
	// Skip the next song in a playlist
	// (POST /music/{playlist}/skip)
	PostMusicPlaylistSkip(w http.ResponseWriter, r *http.Request, playlist Playlist)
	// List all sounds
	// (GET /sounds)
	GetSounds(w http.ResponseWriter, r *http.Request)
	// Get sound details
	// (GET /sounds/{sound})
	GetSoundsSound(w http.ResponseWriter, r *http.Request, sound Sound)
	// Loop a sound
	// (POST /sounds/{sound}/loop)
	PostSoundsLoop(w http.ResponseWriter, r *http.Request, sound Sound)
	// Play a sound
	// (POST /sounds/{sound}/play)
	PostSoundsPlay(w http.ResponseWriter, r *http.Request, sound Sound)
	// Stop a looped sound
	// (POST /sounds/{sound}/unloop)
	PostSoundsUnloop(w http.ResponseWriter, r *http.Request, sound Sound)
	// Get Intensity
	// (GET /system/intensity)
	GetSystemIntensity(w http.ResponseWriter, r *http.Request)
	// Set Intensity
	// (POST /system/intensity)
	PostSystemIntensity(w http.ResponseWriter, r *http.Request)
	// Get volume
	// (GET /system/volume)
	GetSystemVolume(w http.ResponseWriter, r *http.Request)
	// Set Volume
	// (POST /system/volume)
	PostSystemVolume(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetLights operation middleware
func (siw *ServerInterfaceWrapper) GetLights(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLights(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostLightsClear operation middleware
func (siw *ServerInterfaceWrapper) PostLightsClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLightsClear(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetLightsEffect operation middleware
func (siw *ServerInterfaceWrapper) GetLightsEffect(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "effect" -------------
	var effect LightEffect

	err = runtime.BindStyledParameter("simple", false, "effect", chi.URLParam(r, "effect"), &effect)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "effect", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLightsEffect(w, r, effect)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostLightsStart operation middleware
func (siw *ServerInterfaceWrapper) PostLightsStart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "effect" -------------
	var effect LightEffect

	err = runtime.BindStyledParameter("simple", false, "effect", chi.URLParam(r, "effect"), &effect)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "effect", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLightsStart(w, r, effect)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostLightsStop operation middleware
func (siw *ServerInterfaceWrapper) PostLightsStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "effect" -------------
	var effect LightEffect

	err = runtime.BindStyledParameter("simple", false, "effect", chi.URLParam(r, "effect"), &effect)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "effect", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostLightsStop(w, r, effect)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMusic operation middleware
func (siw *ServerInterfaceWrapper) GetMusic(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMusic(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostMusicNext operation middleware
func (siw *ServerInterfaceWrapper) PostMusicNext(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMusicNext(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostMusicPause operation middleware
func (siw *ServerInterfaceWrapper) PostMusicPause(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMusicPause(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostMusicPlay operation middleware
func (siw *ServerInterfaceWrapper) PostMusicPlay(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMusicPlay(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMusicPlaying operation middleware
func (siw *ServerInterfaceWrapper) GetMusicPlaying(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMusicPlaying(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostMusicStop operation middleware
func (siw *ServerInterfaceWrapper) PostMusicStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMusicStop(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMusicPlaylist operation middleware
func (siw *ServerInterfaceWrapper) GetMusicPlaylist(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "playlist" -------------
	var playlist Playlist

	err = runtime.BindStyledParameter("simple", false, "playlist", chi.URLParam(r, "playlist"), &playlist)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "playlist", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMusicPlaylist(w, r, playlist)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMusicPlaylistChance operation middleware
func (siw *ServerInterfaceWrapper) GetMusicPlaylistChance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "playlist" -------------
	var playlist string

	err = runtime.BindStyledParameter("simple", false, "playlist", chi.URLParam(r, "playlist"), &playlist)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "playlist", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMusicPlaylistChance(w, r, playlist)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMusicPlaylistPosition operation middleware
func (siw *ServerInterfaceWrapper) GetMusicPlaylistPosition(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "playlist" -------------
	var playlist string

	err = runtime.BindStyledParameter("simple", false, "playlist", chi.URLParam(r, "playlist"), &playlist)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "playlist", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMusicPlaylistPosition(w, r, playlist)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostMusicPlaylistSkip operation middleware
func (siw *ServerInterfaceWrapper) PostMusicPlaylistSkip(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "playlist" -------------
	var playlist Playlist

	err = runtime.BindStyledParameter("simple", false, "playlist", chi.URLParam(r, "playlist"), &playlist)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "playlist", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMusicPlaylistSkip(w, r, playlist)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSounds operation middleware
func (siw *ServerInterfaceWrapper) GetSounds(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSounds(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSoundsSound operation middleware
func (siw *ServerInterfaceWrapper) GetSoundsSound(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "sound" -------------
	var sound Sound

	err = runtime.BindStyledParameter("simple", false, "sound", chi.URLParam(r, "sound"), &sound)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sound", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSoundsSound(w, r, sound)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostSoundsLoop operation middleware
func (siw *ServerInterfaceWrapper) PostSoundsLoop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "sound" -------------
	var sound Sound

	err = runtime.BindStyledParameter("simple", false, "sound", chi.URLParam(r, "sound"), &sound)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sound", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSoundsLoop(w, r, sound)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostSoundsPlay operation middleware
func (siw *ServerInterfaceWrapper) PostSoundsPlay(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "sound" -------------
	var sound Sound

	err = runtime.BindStyledParameter("simple", false, "sound", chi.URLParam(r, "sound"), &sound)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sound", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSoundsPlay(w, r, sound)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostSoundsUnloop operation middleware
func (siw *ServerInterfaceWrapper) PostSoundsUnloop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "sound" -------------
	var sound Sound

	err = runtime.BindStyledParameter("simple", false, "sound", chi.URLParam(r, "sound"), &sound)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sound", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSoundsUnloop(w, r, sound)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSystemIntensity operation middleware
func (siw *ServerInterfaceWrapper) GetSystemIntensity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSystemIntensity(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostSystemIntensity operation middleware
func (siw *ServerInterfaceWrapper) PostSystemIntensity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSystemIntensity(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSystemVolume operation middleware
func (siw *ServerInterfaceWrapper) GetSystemVolume(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSystemVolume(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostSystemVolume operation middleware
func (siw *ServerInterfaceWrapper) PostSystemVolume(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSystemVolume(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/lights", wrapper.GetLights)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/lights/clear", wrapper.PostLightsClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/lights/{effect}", wrapper.GetLightsEffect)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/lights/{effect}/start", wrapper.PostLightsStart)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/lights/{effect}/stop", wrapper.PostLightsStop)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/music", wrapper.GetMusic)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/music/next", wrapper.PostMusicNext)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/music/pause", wrapper.PostMusicPause)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/music/play", wrapper.PostMusicPlay)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/music/playing", wrapper.GetMusicPlaying)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/music/stop", wrapper.PostMusicStop)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/music/{playlist}", wrapper.GetMusicPlaylist)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/music/{playlist}/chance", wrapper.GetMusicPlaylistChance)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/music/{playlist}/position", wrapper.GetMusicPlaylistPosition)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/music/{playlist}/skip", wrapper.PostMusicPlaylistSkip)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sounds", wrapper.GetSounds)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/sounds/{sound}", wrapper.GetSoundsSound)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sounds/{sound}/loop", wrapper.PostSoundsLoop)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sounds/{sound}/play", wrapper.PostSoundsPlay)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/sounds/{sound}/unloop", wrapper.PostSoundsUnloop)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/system/intensity", wrapper.GetSystemIntensity)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/system/intensity", wrapper.PostSystemIntensity)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/system/volume", wrapper.GetSystemVolume)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/system/volume", wrapper.PostSystemVolume)
	})

	return r
}
