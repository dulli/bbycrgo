// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package rest

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetLights request
	GetLights(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLightsClear request
	PostLightsClear(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLightsEffect request
	GetLightsEffect(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLightsStart request
	PostLightsStart(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLightsStop request
	PostLightsStop(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMusic request
	GetMusic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMusicNext request
	PostMusicNext(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMusicPause request
	PostMusicPause(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMusicPlay request
	PostMusicPlay(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMusicPlaying request
	GetMusicPlaying(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMusicStop request
	PostMusicStop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMusicPlaylist request
	GetMusicPlaylist(ctx context.Context, playlist Playlist, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMusicPlaylistChance request
	GetMusicPlaylistChance(ctx context.Context, playlist string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMusicPlaylistPosition request
	GetMusicPlaylistPosition(ctx context.Context, playlist string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMusicPlaylistSkip request
	PostMusicPlaylistSkip(ctx context.Context, playlist Playlist, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSounds request
	GetSounds(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSoundsSound request
	GetSoundsSound(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSoundsLoop request
	PostSoundsLoop(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSoundsPlay request
	PostSoundsPlay(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSoundsUnloop request
	PostSoundsUnloop(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemIntensity request
	GetSystemIntensity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemIntensity request with any body
	PostSystemIntensityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemIntensity(ctx context.Context, body PostSystemIntensityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemVolume request
	GetSystemVolume(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSystemVolume request with any body
	PostSystemVolumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSystemVolume(ctx context.Context, body PostSystemVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetLights(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLightsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLightsClear(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLightsClearRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLightsEffect(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLightsEffectRequest(c.Server, effect)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLightsStart(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLightsStartRequest(c.Server, effect)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLightsStop(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLightsStopRequest(c.Server, effect)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMusic(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMusicRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMusicNext(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMusicNextRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMusicPause(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMusicPauseRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMusicPlay(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMusicPlayRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMusicPlaying(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMusicPlayingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMusicStop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMusicStopRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMusicPlaylist(ctx context.Context, playlist Playlist, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMusicPlaylistRequest(c.Server, playlist)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMusicPlaylistChance(ctx context.Context, playlist string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMusicPlaylistChanceRequest(c.Server, playlist)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMusicPlaylistPosition(ctx context.Context, playlist string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMusicPlaylistPositionRequest(c.Server, playlist)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMusicPlaylistSkip(ctx context.Context, playlist Playlist, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMusicPlaylistSkipRequest(c.Server, playlist)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSounds(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSoundsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSoundsSound(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSoundsSoundRequest(c.Server, sound)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSoundsLoop(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSoundsLoopRequest(c.Server, sound)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSoundsPlay(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSoundsPlayRequest(c.Server, sound)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSoundsUnloop(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSoundsUnloopRequest(c.Server, sound)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemIntensity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemIntensityRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemIntensityWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemIntensityRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemIntensity(ctx context.Context, body PostSystemIntensityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemIntensityRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemVolume(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemVolumeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemVolumeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemVolumeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSystemVolume(ctx context.Context, body PostSystemVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSystemVolumeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetLightsRequest generates requests for GetLights
func NewGetLightsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lights")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLightsClearRequest generates requests for PostLightsClear
func NewPostLightsClearRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lights/clear")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLightsEffectRequest generates requests for GetLightsEffect
func NewGetLightsEffectRequest(server string, effect LightEffect) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "effect", runtime.ParamLocationPath, effect)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lights/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLightsStartRequest generates requests for PostLightsStart
func NewPostLightsStartRequest(server string, effect LightEffect) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "effect", runtime.ParamLocationPath, effect)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lights/%s/start", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLightsStopRequest generates requests for PostLightsStop
func NewPostLightsStopRequest(server string, effect LightEffect) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "effect", runtime.ParamLocationPath, effect)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lights/%s/stop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMusicRequest generates requests for GetMusic
func NewGetMusicRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/music")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMusicNextRequest generates requests for PostMusicNext
func NewPostMusicNextRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/music/next")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMusicPauseRequest generates requests for PostMusicPause
func NewPostMusicPauseRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/music/pause")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMusicPlayRequest generates requests for PostMusicPlay
func NewPostMusicPlayRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/music/play")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMusicPlayingRequest generates requests for GetMusicPlaying
func NewGetMusicPlayingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/music/playing")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMusicStopRequest generates requests for PostMusicStop
func NewPostMusicStopRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/music/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMusicPlaylistRequest generates requests for GetMusicPlaylist
func NewGetMusicPlaylistRequest(server string, playlist Playlist) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playlist", runtime.ParamLocationPath, playlist)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/music/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMusicPlaylistChanceRequest generates requests for GetMusicPlaylistChance
func NewGetMusicPlaylistChanceRequest(server string, playlist string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playlist", runtime.ParamLocationPath, playlist)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/music/%s/chance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMusicPlaylistPositionRequest generates requests for GetMusicPlaylistPosition
func NewGetMusicPlaylistPositionRequest(server string, playlist string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playlist", runtime.ParamLocationPath, playlist)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/music/%s/position", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMusicPlaylistSkipRequest generates requests for PostMusicPlaylistSkip
func NewPostMusicPlaylistSkipRequest(server string, playlist Playlist) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playlist", runtime.ParamLocationPath, playlist)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/music/%s/skip", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSoundsRequest generates requests for GetSounds
func NewGetSoundsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSoundsSoundRequest generates requests for GetSoundsSound
func NewGetSoundsSoundRequest(server string, sound Sound) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sound", runtime.ParamLocationPath, sound)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSoundsLoopRequest generates requests for PostSoundsLoop
func NewPostSoundsLoopRequest(server string, sound Sound) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sound", runtime.ParamLocationPath, sound)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds/%s/loop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSoundsPlayRequest generates requests for PostSoundsPlay
func NewPostSoundsPlayRequest(server string, sound Sound) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sound", runtime.ParamLocationPath, sound)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds/%s/play", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSoundsUnloopRequest generates requests for PostSoundsUnloop
func NewPostSoundsUnloopRequest(server string, sound Sound) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sound", runtime.ParamLocationPath, sound)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sounds/%s/unloop", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemIntensityRequest generates requests for GetSystemIntensity
func NewGetSystemIntensityRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/intensity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSystemIntensityRequest calls the generic PostSystemIntensity builder with application/json body
func NewPostSystemIntensityRequest(server string, body PostSystemIntensityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemIntensityRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemIntensityRequestWithBody generates requests for PostSystemIntensity with any type of body
func NewPostSystemIntensityRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/intensity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSystemVolumeRequest generates requests for GetSystemVolume
func NewGetSystemVolumeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/volume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSystemVolumeRequest calls the generic PostSystemVolume builder with application/json body
func NewPostSystemVolumeRequest(server string, body PostSystemVolumeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSystemVolumeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSystemVolumeRequestWithBody generates requests for PostSystemVolume with any type of body
func NewPostSystemVolumeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/system/volume")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetLights request
	GetLightsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLightsResponse, error)

	// PostLightsClear request
	PostLightsClearWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostLightsClearResponse, error)

	// GetLightsEffect request
	GetLightsEffectWithResponse(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*GetLightsEffectResponse, error)

	// PostLightsStart request
	PostLightsStartWithResponse(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*PostLightsStartResponse, error)

	// PostLightsStop request
	PostLightsStopWithResponse(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*PostLightsStopResponse, error)

	// GetMusic request
	GetMusicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMusicResponse, error)

	// PostMusicNext request
	PostMusicNextWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostMusicNextResponse, error)

	// PostMusicPause request
	PostMusicPauseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostMusicPauseResponse, error)

	// PostMusicPlay request
	PostMusicPlayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostMusicPlayResponse, error)

	// GetMusicPlaying request
	GetMusicPlayingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMusicPlayingResponse, error)

	// PostMusicStop request
	PostMusicStopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostMusicStopResponse, error)

	// GetMusicPlaylist request
	GetMusicPlaylistWithResponse(ctx context.Context, playlist Playlist, reqEditors ...RequestEditorFn) (*GetMusicPlaylistResponse, error)

	// GetMusicPlaylistChance request
	GetMusicPlaylistChanceWithResponse(ctx context.Context, playlist string, reqEditors ...RequestEditorFn) (*GetMusicPlaylistChanceResponse, error)

	// GetMusicPlaylistPosition request
	GetMusicPlaylistPositionWithResponse(ctx context.Context, playlist string, reqEditors ...RequestEditorFn) (*GetMusicPlaylistPositionResponse, error)

	// PostMusicPlaylistSkip request
	PostMusicPlaylistSkipWithResponse(ctx context.Context, playlist Playlist, reqEditors ...RequestEditorFn) (*PostMusicPlaylistSkipResponse, error)

	// GetSounds request
	GetSoundsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSoundsResponse, error)

	// GetSoundsSound request
	GetSoundsSoundWithResponse(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*GetSoundsSoundResponse, error)

	// PostSoundsLoop request
	PostSoundsLoopWithResponse(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*PostSoundsLoopResponse, error)

	// PostSoundsPlay request
	PostSoundsPlayWithResponse(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*PostSoundsPlayResponse, error)

	// PostSoundsUnloop request
	PostSoundsUnloopWithResponse(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*PostSoundsUnloopResponse, error)

	// GetSystemIntensity request
	GetSystemIntensityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemIntensityResponse, error)

	// PostSystemIntensity request with any body
	PostSystemIntensityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemIntensityResponse, error)

	PostSystemIntensityWithResponse(ctx context.Context, body PostSystemIntensityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemIntensityResponse, error)

	// GetSystemVolume request
	GetSystemVolumeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemVolumeResponse, error)

	// PostSystemVolume request with any body
	PostSystemVolumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemVolumeResponse, error)

	PostSystemVolumeWithResponse(ctx context.Context, body PostSystemVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemVolumeResponse, error)
}

type GetLightsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Entity []string `json:"entity"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLightsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLightsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLightsClearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostLightsClearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLightsClearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLightsEffectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Entity []string `json:"entity"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLightsEffectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLightsEffectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLightsStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostLightsStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLightsStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLightsStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostLightsStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLightsStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMusicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Entity []string `json:"entity"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMusicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMusicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMusicNextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMusicNextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMusicNextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMusicPauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMusicPauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMusicPauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMusicPlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMusicPlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMusicPlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMusicPlayingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Artist   string  `json:"artist"`
		Image    *string `json:"image,omitempty"`
		Playlist string  `json:"playlist"`
		Title    string  `json:"title"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMusicPlayingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMusicPlayingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMusicStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMusicStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMusicStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMusicPlaylistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Entity []string `json:"entity"`
	}
	JSON404 *struct {
		Entity []string `json:"entity"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMusicPlaylistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMusicPlaylistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMusicPlaylistChanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Chance int `json:"chance"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMusicPlaylistChanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMusicPlaylistChanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMusicPlaylistPositionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Position int `json:"position"`
	}
}

// Status returns HTTPResponse.Status
func (r GetMusicPlaylistPositionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMusicPlaylistPositionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMusicPlaylistSkipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostMusicPlaylistSkipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMusicPlaylistSkipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Sounds *[]SoundDetails `json:"sounds,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSoundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoundsSoundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		BufferCount int          `json:"buffer-count"`
		Links       SoundActions `json:"links"`
		Name        string       `json:"name"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSoundsSoundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoundsSoundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSoundsLoopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSoundsLoopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSoundsLoopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSoundsPlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSoundsPlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSoundsPlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSoundsUnloopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSoundsUnloopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSoundsUnloopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemIntensityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AudioLevel
}

// Status returns HTTPResponse.Status
func (r GetSystemIntensityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemIntensityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemIntensityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemIntensityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemIntensityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AudioLevel
}

// Status returns HTTPResponse.Status
func (r GetSystemVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSystemVolumeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSystemVolumeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSystemVolumeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetLightsWithResponse request returning *GetLightsResponse
func (c *ClientWithResponses) GetLightsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLightsResponse, error) {
	rsp, err := c.GetLights(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLightsResponse(rsp)
}

// PostLightsClearWithResponse request returning *PostLightsClearResponse
func (c *ClientWithResponses) PostLightsClearWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostLightsClearResponse, error) {
	rsp, err := c.PostLightsClear(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLightsClearResponse(rsp)
}

// GetLightsEffectWithResponse request returning *GetLightsEffectResponse
func (c *ClientWithResponses) GetLightsEffectWithResponse(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*GetLightsEffectResponse, error) {
	rsp, err := c.GetLightsEffect(ctx, effect, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLightsEffectResponse(rsp)
}

// PostLightsStartWithResponse request returning *PostLightsStartResponse
func (c *ClientWithResponses) PostLightsStartWithResponse(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*PostLightsStartResponse, error) {
	rsp, err := c.PostLightsStart(ctx, effect, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLightsStartResponse(rsp)
}

// PostLightsStopWithResponse request returning *PostLightsStopResponse
func (c *ClientWithResponses) PostLightsStopWithResponse(ctx context.Context, effect LightEffect, reqEditors ...RequestEditorFn) (*PostLightsStopResponse, error) {
	rsp, err := c.PostLightsStop(ctx, effect, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLightsStopResponse(rsp)
}

// GetMusicWithResponse request returning *GetMusicResponse
func (c *ClientWithResponses) GetMusicWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMusicResponse, error) {
	rsp, err := c.GetMusic(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMusicResponse(rsp)
}

// PostMusicNextWithResponse request returning *PostMusicNextResponse
func (c *ClientWithResponses) PostMusicNextWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostMusicNextResponse, error) {
	rsp, err := c.PostMusicNext(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMusicNextResponse(rsp)
}

// PostMusicPauseWithResponse request returning *PostMusicPauseResponse
func (c *ClientWithResponses) PostMusicPauseWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostMusicPauseResponse, error) {
	rsp, err := c.PostMusicPause(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMusicPauseResponse(rsp)
}

// PostMusicPlayWithResponse request returning *PostMusicPlayResponse
func (c *ClientWithResponses) PostMusicPlayWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostMusicPlayResponse, error) {
	rsp, err := c.PostMusicPlay(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMusicPlayResponse(rsp)
}

// GetMusicPlayingWithResponse request returning *GetMusicPlayingResponse
func (c *ClientWithResponses) GetMusicPlayingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMusicPlayingResponse, error) {
	rsp, err := c.GetMusicPlaying(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMusicPlayingResponse(rsp)
}

// PostMusicStopWithResponse request returning *PostMusicStopResponse
func (c *ClientWithResponses) PostMusicStopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostMusicStopResponse, error) {
	rsp, err := c.PostMusicStop(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMusicStopResponse(rsp)
}

// GetMusicPlaylistWithResponse request returning *GetMusicPlaylistResponse
func (c *ClientWithResponses) GetMusicPlaylistWithResponse(ctx context.Context, playlist Playlist, reqEditors ...RequestEditorFn) (*GetMusicPlaylistResponse, error) {
	rsp, err := c.GetMusicPlaylist(ctx, playlist, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMusicPlaylistResponse(rsp)
}

// GetMusicPlaylistChanceWithResponse request returning *GetMusicPlaylistChanceResponse
func (c *ClientWithResponses) GetMusicPlaylistChanceWithResponse(ctx context.Context, playlist string, reqEditors ...RequestEditorFn) (*GetMusicPlaylistChanceResponse, error) {
	rsp, err := c.GetMusicPlaylistChance(ctx, playlist, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMusicPlaylistChanceResponse(rsp)
}

// GetMusicPlaylistPositionWithResponse request returning *GetMusicPlaylistPositionResponse
func (c *ClientWithResponses) GetMusicPlaylistPositionWithResponse(ctx context.Context, playlist string, reqEditors ...RequestEditorFn) (*GetMusicPlaylistPositionResponse, error) {
	rsp, err := c.GetMusicPlaylistPosition(ctx, playlist, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMusicPlaylistPositionResponse(rsp)
}

// PostMusicPlaylistSkipWithResponse request returning *PostMusicPlaylistSkipResponse
func (c *ClientWithResponses) PostMusicPlaylistSkipWithResponse(ctx context.Context, playlist Playlist, reqEditors ...RequestEditorFn) (*PostMusicPlaylistSkipResponse, error) {
	rsp, err := c.PostMusicPlaylistSkip(ctx, playlist, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMusicPlaylistSkipResponse(rsp)
}

// GetSoundsWithResponse request returning *GetSoundsResponse
func (c *ClientWithResponses) GetSoundsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSoundsResponse, error) {
	rsp, err := c.GetSounds(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSoundsResponse(rsp)
}

// GetSoundsSoundWithResponse request returning *GetSoundsSoundResponse
func (c *ClientWithResponses) GetSoundsSoundWithResponse(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*GetSoundsSoundResponse, error) {
	rsp, err := c.GetSoundsSound(ctx, sound, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSoundsSoundResponse(rsp)
}

// PostSoundsLoopWithResponse request returning *PostSoundsLoopResponse
func (c *ClientWithResponses) PostSoundsLoopWithResponse(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*PostSoundsLoopResponse, error) {
	rsp, err := c.PostSoundsLoop(ctx, sound, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSoundsLoopResponse(rsp)
}

// PostSoundsPlayWithResponse request returning *PostSoundsPlayResponse
func (c *ClientWithResponses) PostSoundsPlayWithResponse(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*PostSoundsPlayResponse, error) {
	rsp, err := c.PostSoundsPlay(ctx, sound, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSoundsPlayResponse(rsp)
}

// PostSoundsUnloopWithResponse request returning *PostSoundsUnloopResponse
func (c *ClientWithResponses) PostSoundsUnloopWithResponse(ctx context.Context, sound Sound, reqEditors ...RequestEditorFn) (*PostSoundsUnloopResponse, error) {
	rsp, err := c.PostSoundsUnloop(ctx, sound, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSoundsUnloopResponse(rsp)
}

// GetSystemIntensityWithResponse request returning *GetSystemIntensityResponse
func (c *ClientWithResponses) GetSystemIntensityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemIntensityResponse, error) {
	rsp, err := c.GetSystemIntensity(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemIntensityResponse(rsp)
}

// PostSystemIntensityWithBodyWithResponse request with arbitrary body returning *PostSystemIntensityResponse
func (c *ClientWithResponses) PostSystemIntensityWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemIntensityResponse, error) {
	rsp, err := c.PostSystemIntensityWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemIntensityResponse(rsp)
}

func (c *ClientWithResponses) PostSystemIntensityWithResponse(ctx context.Context, body PostSystemIntensityJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemIntensityResponse, error) {
	rsp, err := c.PostSystemIntensity(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemIntensityResponse(rsp)
}

// GetSystemVolumeWithResponse request returning *GetSystemVolumeResponse
func (c *ClientWithResponses) GetSystemVolumeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemVolumeResponse, error) {
	rsp, err := c.GetSystemVolume(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemVolumeResponse(rsp)
}

// PostSystemVolumeWithBodyWithResponse request with arbitrary body returning *PostSystemVolumeResponse
func (c *ClientWithResponses) PostSystemVolumeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSystemVolumeResponse, error) {
	rsp, err := c.PostSystemVolumeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemVolumeResponse(rsp)
}

func (c *ClientWithResponses) PostSystemVolumeWithResponse(ctx context.Context, body PostSystemVolumeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSystemVolumeResponse, error) {
	rsp, err := c.PostSystemVolume(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSystemVolumeResponse(rsp)
}

// ParseGetLightsResponse parses an HTTP response from a GetLightsWithResponse call
func ParseGetLightsResponse(rsp *http.Response) (*GetLightsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLightsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Entity []string `json:"entity"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLightsClearResponse parses an HTTP response from a PostLightsClearWithResponse call
func ParsePostLightsClearResponse(rsp *http.Response) (*PostLightsClearResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLightsClearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLightsEffectResponse parses an HTTP response from a GetLightsEffectWithResponse call
func ParseGetLightsEffectResponse(rsp *http.Response) (*GetLightsEffectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLightsEffectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Entity []string `json:"entity"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostLightsStartResponse parses an HTTP response from a PostLightsStartWithResponse call
func ParsePostLightsStartResponse(rsp *http.Response) (*PostLightsStartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLightsStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostLightsStopResponse parses an HTTP response from a PostLightsStopWithResponse call
func ParsePostLightsStopResponse(rsp *http.Response) (*PostLightsStopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLightsStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMusicResponse parses an HTTP response from a GetMusicWithResponse call
func ParseGetMusicResponse(rsp *http.Response) (*GetMusicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMusicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Entity []string `json:"entity"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMusicNextResponse parses an HTTP response from a PostMusicNextWithResponse call
func ParsePostMusicNextResponse(rsp *http.Response) (*PostMusicNextResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMusicNextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostMusicPauseResponse parses an HTTP response from a PostMusicPauseWithResponse call
func ParsePostMusicPauseResponse(rsp *http.Response) (*PostMusicPauseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMusicPauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostMusicPlayResponse parses an HTTP response from a PostMusicPlayWithResponse call
func ParsePostMusicPlayResponse(rsp *http.Response) (*PostMusicPlayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMusicPlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMusicPlayingResponse parses an HTTP response from a GetMusicPlayingWithResponse call
func ParseGetMusicPlayingResponse(rsp *http.Response) (*GetMusicPlayingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMusicPlayingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Artist   string  `json:"artist"`
			Image    *string `json:"image,omitempty"`
			Playlist string  `json:"playlist"`
			Title    string  `json:"title"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMusicStopResponse parses an HTTP response from a PostMusicStopWithResponse call
func ParsePostMusicStopResponse(rsp *http.Response) (*PostMusicStopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMusicStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMusicPlaylistResponse parses an HTTP response from a GetMusicPlaylistWithResponse call
func ParseGetMusicPlaylistResponse(rsp *http.Response) (*GetMusicPlaylistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMusicPlaylistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Entity []string `json:"entity"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Entity []string `json:"entity"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetMusicPlaylistChanceResponse parses an HTTP response from a GetMusicPlaylistChanceWithResponse call
func ParseGetMusicPlaylistChanceResponse(rsp *http.Response) (*GetMusicPlaylistChanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMusicPlaylistChanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Chance int `json:"chance"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMusicPlaylistPositionResponse parses an HTTP response from a GetMusicPlaylistPositionWithResponse call
func ParseGetMusicPlaylistPositionResponse(rsp *http.Response) (*GetMusicPlaylistPositionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMusicPlaylistPositionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Position int `json:"position"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMusicPlaylistSkipResponse parses an HTTP response from a PostMusicPlaylistSkipWithResponse call
func ParsePostMusicPlaylistSkipResponse(rsp *http.Response) (*PostMusicPlaylistSkipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMusicPlaylistSkipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSoundsResponse parses an HTTP response from a GetSoundsWithResponse call
func ParseGetSoundsResponse(rsp *http.Response) (*GetSoundsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSoundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Sounds *[]SoundDetails `json:"sounds,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSoundsSoundResponse parses an HTTP response from a GetSoundsSoundWithResponse call
func ParseGetSoundsSoundResponse(rsp *http.Response) (*GetSoundsSoundResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSoundsSoundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			BufferCount int          `json:"buffer-count"`
			Links       SoundActions `json:"links"`
			Name        string       `json:"name"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSoundsLoopResponse parses an HTTP response from a PostSoundsLoopWithResponse call
func ParsePostSoundsLoopResponse(rsp *http.Response) (*PostSoundsLoopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSoundsLoopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSoundsPlayResponse parses an HTTP response from a PostSoundsPlayWithResponse call
func ParsePostSoundsPlayResponse(rsp *http.Response) (*PostSoundsPlayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSoundsPlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSoundsUnloopResponse parses an HTTP response from a PostSoundsUnloopWithResponse call
func ParsePostSoundsUnloopResponse(rsp *http.Response) (*PostSoundsUnloopResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSoundsUnloopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemIntensityResponse parses an HTTP response from a GetSystemIntensityWithResponse call
func ParseGetSystemIntensityResponse(rsp *http.Response) (*GetSystemIntensityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemIntensityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AudioLevel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSystemIntensityResponse parses an HTTP response from a PostSystemIntensityWithResponse call
func ParsePostSystemIntensityResponse(rsp *http.Response) (*PostSystemIntensityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSystemIntensityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSystemVolumeResponse parses an HTTP response from a GetSystemVolumeWithResponse call
func ParseGetSystemVolumeResponse(rsp *http.Response) (*GetSystemVolumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AudioLevel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSystemVolumeResponse parses an HTTP response from a PostSystemVolumeWithResponse call
func ParsePostSystemVolumeResponse(rsp *http.Response) (*PostSystemVolumeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSystemVolumeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
